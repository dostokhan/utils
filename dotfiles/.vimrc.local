UnBundle 'kchmck/vim-coffee-script'

set nofoldenable
set nospell
"colorscheme blueshift
colorscheme solarized

"disable indentation white spaces coloring
let g:indent_guides_enable_on_vim_startup = 0


""""""""""""""""""""""""""""""""""""""""""
"""""""" ALE LINTER CONFIGURATION """"""""
""""""""""""""""""""""""""""""""""""""""""

let g:ale_javascript_eslint_executable = '[ -f $(npm bin)/eslint ] && $(npm bin)/eslint || eslint'
let g:ale_javascript_eslint_options = '--config $(git rev-parse --show-toplevel)/.eslintrc.js'



" Fix files with prettier, and then ESLint.
let b:ale_fixers = ['prettier', 'eslint']
" Equivalent to the above.
let b:ale_fixers = {'javascript': ['prettier', 'eslint']}

let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'
let g:ale_fix_on_save = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_set_loclist = 1
let g:ale_list_window_size = 5
let g:ale_open_list = 1



function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
        \   '%d⨉ %d⚠ ',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline+=%=
set statusline+=\ %{LinterStatus()}

""""""""""""""""""""""""""""""""""""""""""
"""""""" ALE LINTER CONFIGURATION END """"""""
""""""""""""""""""""""""""""""""""""""""""




"enable linting for using syntastic plugin
let g:syntastic_mode_map = { 'mode': 'active',
                            \ 'active_filetypes': ['javascript', 'python'],
                            \ 'passive_filetypes': ['html', 'css', 'php'] }

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=0
let g:syntastic_check_on_wq=0
let g:syntastic_check_on_w=1
let g:syntastic_javascript_checkers = ['eslint']

" let s:eslint_path = system('PATH=$(npm bin):$PATH && which eslint')
" let b:syntastic_javascript_eslint_exec = substitute(s:eslint_path, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')

" let s:project_root_dir =
let g:syntastic_javascript_eslint_exe = '[ -f $(npm bin)/eslint ] && $(npm bin)/eslint || eslint'
" let g:syntastic_javascript_eslint_exec = 'eslint_d'
let g:syntastic_javascript_eslint_args = '--config $(git rev-parse --show-toplevel)/.eslintrc.js'


let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_python_exec = '/usr/bin/python3.6'
let g:syntastic_html_tidy_exec = 'tidy5'


"use project eslint
" if executable('node_modules/.bin/standard')
"   let b:syntastic_javascript_standard_exec = 'node_modules/.bin/standard'
" endif
" go to next,previous eslint error
nnoremap ,> :lNext<CR>
nnoremap ,< :lPrevious<CR>
" debug syntastic
" let g:syntastic_debug=3

" show Syntastic Error Messages
nnoremap ,j :Errors<CR>
nnoremap ,sc :SyntasticCheck<CR>
nnoremap ,rr :w !ruby -c<CR>



" js-beautify
let g:editorconfig_Beautifier = '~/.editorconfig'

"vim-javascript plugin options
let g:javascript_conceal_null                 = "ø"
let g:javascript_conceal_this                 = "@"
let g:javascript_conceal_return               = "⇚"
let g:javascript_conceal_undefined            = "¿"
let g:javascript_conceal_NaN                  = "ℕ"


autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
" for json
autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
autocmd FileType json vnoremap <buffer> <c-f> :call RangeJsonBeautify()<cr>
" for jsx
autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
autocmd FileType jsx vnoremap <buffer> <c-f> :call RangeJsxBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>

set fileencoding=utf-8
set encoding=utf-8


" use javascript-library-syntax
let g:used_javascript_libs = 'jquery,angularjs,react,redux'

" for html files, 2 spaces
" autocmd Filetype html setlocal softtabstop=2 shiftwidth=2 tabstop=2 et noautoindent
" autocmd Filetype javascript setlocal softtabstop=2 shiftwidth=2 tabstop=2 et noautoindent

" set shiftwidth=2               " Use indents of 2 spaces
" set expandtab                   " Tabs are spaces, not tabs
" set tabstop=2                   " An indentation every two columns
" set softtabstop=2               " Let backspace delete indent



" nerdcommenter
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign = 'left'
let g:NERDTrimTraillingWhitespace=1
map <slient ,c :NERDTreeClose<CR>
map <leader>p :NERDTreeCWD


" Copy Paste Between terminals"
" vmap <silent> ,y y:new<CR>:call setline(1,getregtype())<CR>o<Esc>P:wq! ~/reg.txt<CR>
" nmap <silent> ,y :new<CR>:call setline(1,getregtype())<CR>o<Esc>P:wq! ~/reg.txt<CR>
" map <silent> ,p :sview ~/reg.txt<CR>"zdddG:q!<CR>:call setreg('"', @", @z"'"')<CR>p
" map <silent> ,P :sview ~/reg.txt<CR>"zdddG:q!<CR>:call setreg('"', @", @z"'"')<CR>P



" no backup, no swap"
set nobackup
" set backupdir=~/.vimtemp
set noswapfile


" efficient shortcuts
nnorema ; :
" clear highlighted search matches
nmap <slient> ,/ :nohlsearch<CR>
" for saving files which require root privileges"
cmap w!! w !sudo tee % >/dev/null

" insert current date time while saving"
"autocmd bufnewfile *.js so /home/monir/.vim/copyright-header.txt
"autocmd bufnewfile *.js exe "1," . 10 . "g/File Name :.*/s//File Name : " .expand("%")
"autocmd bufnewfile *.js exe "1," . 10 . "g/Creation Date :.*/s//Creation Date : " .strftime("%d-%m-%Y")
"autocmd Bufwritepre,filewritepre *.js execute "normal ma"
"autocmd Bufwritepre,filewritepre *.js exe "1," . 10 . "g/Last Modified :.*/s/Last Modified :.*/Last Modified : " .strftime("%c")
"autocmd bufwritepost,filewritepost *.js execute "normal `a""`"
"
"
" view pdf in vim
:command! -complete=file -nargs=1 Rpdf :r !pdftotext -nopgbrk <q-args> -

" view github wiki markdown pages using ruby gollum server
" set filetype=markdown
" :nnoremap <f8> :wa \| !gollum > /dev/null 2>&1 &<CR>
" :nnoremap <f9> :!kill $( pgrep -f gollum )<CR>



